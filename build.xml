<?xml version="1.0" encoding="UTF-8"?>
<project name="chatjava" default="all">
  
  
  <property file="build.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="700m"/>
  <patternset id="ignored.files">
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/*.rbc/**"/>
    <exclude name="**/*.yarb/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/CVS/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.swc"/>
    <include name="*.zip"/>
    <include name="*.ear"/>
    <include name="*.egg"/>
    <include name="*.ane"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
    <exclude name="**/?*.aj"/>
  </patternset>
  
  <!-- JDK definitions -->
  
  <property name="jdk.bin.1.8" value="${jdk.home.1.8}/bin"/>
  <path id="jdk.classpath.1.8">
    <fileset dir="${jdk.home.1.8}">
      <include name="jre/lib/charsets.jar"/>
      <include name="jre/lib/deploy.jar"/>
      <include name="jre/lib/ext/access-bridge.jar"/>
      <include name="jre/lib/ext/cldrdata.jar"/>
      <include name="jre/lib/ext/dnsns.jar"/>
      <include name="jre/lib/ext/jaccess.jar"/>
      <include name="jre/lib/ext/jfxrt.jar"/>
      <include name="jre/lib/ext/localedata.jar"/>
      <include name="jre/lib/ext/nashorn.jar"/>
      <include name="jre/lib/ext/sunec.jar"/>
      <include name="jre/lib/ext/sunjce_provider.jar"/>
      <include name="jre/lib/ext/sunmscapi.jar"/>
      <include name="jre/lib/ext/sunpkcs11.jar"/>
      <include name="jre/lib/ext/zipfs.jar"/>
      <include name="jre/lib/javaws.jar"/>
      <include name="jre/lib/jce.jar"/>
      <include name="jre/lib/jfr.jar"/>
      <include name="jre/lib/jfxswt.jar"/>
      <include name="jre/lib/jsse.jar"/>
      <include name="jre/lib/management-agent.jar"/>
      <include name="jre/lib/plugin.jar"/>
      <include name="jre/lib/resources.jar"/>
      <include name="jre/lib/rt.jar"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.1.8}"/>
  <property name="project.jdk.bin" value="${jdk.bin.1.8}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.1.8"/>
  <!-- Register Custom Compiler Taskdefs -->
  <property name="javac2.home" value="${idea.home}/lib"/>
  <path id="javac2.classpath">
    <pathelement location="${javac2.home}/javac2.jar"/>
    <pathelement location="${javac2.home}/jdom.jar"/>
    <pathelement location="${javac2.home}/asm-all.jar"/>
    <pathelement location="${javac2.home}/jgoodies-forms.jar"/>
  </path>
  <target name="register.custom.compilers">
    <taskdef name="javac2" classname="com.intellij.ant.Javac2" classpathref="javac2.classpath"/>
    <taskdef name="instrumentIdeaExtensions" classname="com.intellij.ant.InstrumentIdeaExtensions" classpathref="javac2.classpath"/>
  </target>
  
  <!-- Modules -->
  
  
  <!-- Module network -->
  
  <dirname property="module.network.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.network" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.network" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.network" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.network" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="network.output.dir" value="${module.network.basedir}/out/production/network"/>
  <property name="network.testoutput.dir" value="${module.network.basedir}/out/test/network"/>
  
  <path id="network.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="network.module.production.classpath">
    <path refid="${module.jdk.classpath.network}"/>
  </path>
  
  <path id="network.runtime.production.module.classpath">
    <pathelement location="${network.output.dir}"/>
  </path>
  
  <path id="network.module.classpath">
    <path refid="${module.jdk.classpath.network}"/>
    <pathelement location="${network.output.dir}"/>
  </path>
  
  <path id="network.runtime.module.classpath">
    <pathelement location="${network.testoutput.dir}"/>
    <pathelement location="${network.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.network">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.network">
    <patternset refid="excluded.from.module.network"/>
  </patternset>
  
  <path id="network.module.sourcepath">
    <dirset dir="${module.network.basedir}/network">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.network" depends="compile.module.network.production,compile.module.network.tests" description="Compile module network"/>
  
  <target name="compile.module.network.production" depends="register.custom.compilers" description="Compile module network; production classes">
    <mkdir dir="${network.output.dir}"/>
    <javac2 destdir="${network.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.network}/javac">
      <compilerarg line="${compiler.args.network}"/>
      <bootclasspath refid="network.module.bootclasspath"/>
      <classpath refid="network.module.production.classpath"/>
      <src refid="network.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.network"/>
    </javac2>
    
    <copy todir="${network.output.dir}">
      <fileset dir="${module.network.basedir}/network/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.network.tests" depends="register.custom.compilers,compile.module.network.production" description="compile module network; test classes" unless="skip.tests"/>
  
  <target name="clean.module.network" description="cleanup module">
    <delete dir="${network.output.dir}"/>
    <delete dir="${network.testoutput.dir}"/>
  </target>
  
  
  <!-- Module client -->
  
  <dirname property="module.client.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.client" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.client" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.client" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.client" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="client.output.dir" value="${module.client.basedir}/out/production/client"/>
  <property name="client.testoutput.dir" value="${module.client.basedir}/out/test/client"/>
  
  <path id="client.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="client.module.production.classpath">
    <path refid="${module.jdk.classpath.client}"/>
    <pathelement location="${network.output.dir}"/>
    <pathelement location="${idea.home}/lib/hamcrest-core-1.3.jar"/>
    <pathelement location="${idea.home}/lib/junit-4.12.jar"/>
  </path>
  
  <path id="client.runtime.production.module.classpath">
    <pathelement location="${client.output.dir}"/>
    <path refid="network.runtime.production.module.classpath"/>
    <pathelement location="${idea.home}/lib/hamcrest-core-1.3.jar"/>
    <pathelement location="${idea.home}/lib/junit-4.12.jar"/>
  </path>
  
  <path id="client.module.classpath">
    <path refid="${module.jdk.classpath.client}"/>
    <pathelement location="${client.output.dir}"/>
    <pathelement location="${network.testoutput.dir}"/>
    <pathelement location="${network.output.dir}"/>
    <pathelement location="${idea.home}/lib/hamcrest-core-1.3.jar"/>
    <pathelement location="${idea.home}/lib/junit-4.12.jar"/>
  </path>
  
  <path id="client.runtime.module.classpath">
    <pathelement location="${client.testoutput.dir}"/>
    <pathelement location="${client.output.dir}"/>
    <path refid="network.runtime.module.classpath"/>
    <pathelement location="${idea.home}/lib/hamcrest-core-1.3.jar"/>
    <pathelement location="${idea.home}/lib/junit-4.12.jar"/>
  </path>
  
  
  <patternset id="excluded.from.module.client">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.client">
    <patternset refid="excluded.from.module.client"/>
  </patternset>
  
  <path id="client.module.sourcepath">
    <dirset dir="${module.client.basedir}/client">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.client" depends="compile.module.client.production,compile.module.client.tests" description="Compile module client"/>
  
  <target name="compile.module.client.production" depends="register.custom.compilers,compile.module.network" description="Compile module client; production classes">
    <mkdir dir="${client.output.dir}"/>
    <javac2 destdir="${client.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.client}/javac">
      <compilerarg line="${compiler.args.client}"/>
      <bootclasspath refid="client.module.bootclasspath"/>
      <classpath refid="client.module.production.classpath"/>
      <src refid="client.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.client"/>
    </javac2>
    
    <copy todir="${client.output.dir}">
      <fileset dir="${module.client.basedir}/client/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.client.tests" depends="register.custom.compilers,compile.module.client.production" description="compile module client; test classes" unless="skip.tests"/>
  
  <target name="clean.module.client" description="cleanup module">
    <delete dir="${client.output.dir}"/>
    <delete dir="${client.testoutput.dir}"/>
  </target>
  
  
  <!-- Module server -->
  
  <dirname property="module.server.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.server" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.server" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.server" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.server" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="server.output.dir" value="${module.server.basedir}/out/production/server"/>
  <property name="server.testoutput.dir" value="${module.server.basedir}/out/test/server"/>
  
  <path id="server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="server.module.production.classpath">
    <path refid="${module.jdk.classpath.server}"/>
    <pathelement location="${network.output.dir}"/>
  </path>
  
  <path id="server.runtime.production.module.classpath">
    <pathelement location="${server.output.dir}"/>
    <path refid="network.runtime.production.module.classpath"/>
  </path>
  
  <path id="server.module.classpath">
    <path refid="${module.jdk.classpath.server}"/>
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${network.testoutput.dir}"/>
    <pathelement location="${network.output.dir}"/>
  </path>
  
  <path id="server.runtime.module.classpath">
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${server.output.dir}"/>
    <path refid="network.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.server">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.server">
    <patternset refid="excluded.from.module.server"/>
  </patternset>
  
  <path id="server.module.sourcepath">
    <dirset dir="${module.server.basedir}/server">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.server" depends="compile.module.server.production,compile.module.server.tests" description="Compile module server"/>
  
  <target name="compile.module.server.production" depends="register.custom.compilers,compile.module.network" description="Compile module server; production classes">
    <mkdir dir="${server.output.dir}"/>
    <javac2 destdir="${server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.server}/javac">
      <compilerarg line="${compiler.args.server}"/>
      <bootclasspath refid="server.module.bootclasspath"/>
      <classpath refid="server.module.production.classpath"/>
      <src refid="server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.server"/>
    </javac2>
    
    <copy todir="${server.output.dir}">
      <fileset dir="${module.server.basedir}/server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.server.tests" depends="register.custom.compilers,compile.module.server.production" description="compile module server; test classes" unless="skip.tests"/>
  
  <target name="clean.module.server" description="cleanup module">
    <delete dir="${server.output.dir}"/>
    <delete dir="${server.testoutput.dir}"/>
  </target>
  
  
  <!-- Module testi -->
  
  <dirname property="module.testi.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.testi" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.testi" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.testi" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.testi" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="testi.output.dir" value="${module.testi.basedir}/out/production/testi"/>
  <property name="testi.testoutput.dir" value="${module.testi.basedir}/out/test/testi"/>
  
  <path id="testi.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="testi.module.production.classpath">
    <path refid="${module.jdk.classpath.testi}"/>
  </path>
  
  <path id="testi.runtime.production.module.classpath">
    <pathelement location="${testi.output.dir}"/>
  </path>
  
  <path id="testi.module.classpath">
    <path refid="${module.jdk.classpath.testi}"/>
    <pathelement location="${testi.output.dir}"/>
    <pathelement location="${client.testoutput.dir}"/>
    <pathelement location="${client.output.dir}"/>
  </path>
  
  <path id="testi.runtime.module.classpath">
    <pathelement location="${testi.testoutput.dir}"/>
    <pathelement location="${testi.output.dir}"/>
    <path refid="client.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.testi">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.testi">
    <patternset refid="excluded.from.module.testi"/>
  </patternset>
  
  
  <target name="compile.module.testi" depends="compile.module.testi.production,compile.module.testi.tests" description="Compile module testi"/>
  
  <target name="compile.module.testi.production" depends="register.custom.compilers,compile.module.client" description="Compile module testi; production classes"/>
  
  <target name="compile.module.testi.tests" depends="register.custom.compilers,compile.module.testi.production" description="compile module testi; test classes" unless="skip.tests"/>
  
  <target name="clean.module.testi" description="cleanup module">
    <delete dir="${testi.output.dir}"/>
    <delete dir="${testi.testoutput.dir}"/>
  </target>
  
  
  <!-- Module chatJava -->
  
  <dirname property="module.chatjava.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.chatjava" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.chatjava" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.chatjava" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.chatjava" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="chatjava.output.dir" value="${module.chatjava.basedir}/out/production/chatJava"/>
  <property name="chatjava.testoutput.dir" value="${module.chatjava.basedir}/out/test/chatJava"/>
  
  <path id="chatjava.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="chatjava.module.production.classpath">
    <path refid="${module.jdk.classpath.chatjava}"/>
  </path>
  
  <path id="chatjava.runtime.production.module.classpath">
    <pathelement location="${chatjava.output.dir}"/>
  </path>
  
  <path id="chatjava.module.classpath">
    <path refid="${module.jdk.classpath.chatjava}"/>
    <pathelement location="${chatjava.output.dir}"/>
    <pathelement location="${testi.testoutput.dir}"/>
    <pathelement location="${testi.output.dir}"/>
    <pathelement location="${client.testoutput.dir}"/>
    <pathelement location="${client.output.dir}"/>
  </path>
  
  <path id="chatjava.runtime.module.classpath">
    <pathelement location="${chatjava.testoutput.dir}"/>
    <pathelement location="${chatjava.output.dir}"/>
    <path refid="testi.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.chatjava">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.chatjava">
    <patternset refid="excluded.from.module.chatjava"/>
  </patternset>
  
  <path id="chatjava.module.sourcepath">
    <dirset dir="${module.chatjava.basedir}">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.chatjava" depends="compile.module.chatjava.production,compile.module.chatjava.tests" description="Compile module chatJava"/>
  
  <target name="compile.module.chatjava.production" depends="register.custom.compilers,compile.module.testi" description="Compile module chatJava; production classes">
    <mkdir dir="${chatjava.output.dir}"/>
    <javac2 destdir="${chatjava.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.chatjava}/javac">
      <compilerarg line="${compiler.args.chatjava}"/>
      <bootclasspath refid="chatjava.module.bootclasspath"/>
      <classpath refid="chatjava.module.production.classpath"/>
      <src refid="chatjava.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.chatjava"/>
    </javac2>
    
    <copy todir="${chatjava.output.dir}">
      <fileset dir="${module.chatjava.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.chatjava.tests" depends="register.custom.compilers,compile.module.chatjava.production" description="compile module chatJava; test classes" unless="skip.tests"/>
  
  <target name="clean.module.chatjava" description="cleanup module">
    <delete dir="${chatjava.output.dir}"/>
    <delete dir="${chatjava.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.network, clean.module.client, clean.module.server, clean.module.testi, clean.module.chatjava" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.network, compile.module.client, compile.module.server, compile.module.testi, compile.module.chatjava" description="build all modules"/>
  
  <target name="all" depends="build.modules" description="build all"/>
</project>